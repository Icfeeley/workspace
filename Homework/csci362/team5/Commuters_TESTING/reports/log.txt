function getData(){ var x = {"rows": [{ "Test Name":"Test4" , "Test ID":"4" , "Requirement":"Distance should handle inputs of 0" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"0.0" , "Input":"[-0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test25" , "Test ID":"25" , "Requirement":"Shall handle areas spanning quadrants" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"400" , "Input":"[[10,10],[-10,-10],[10,-10],[-10,10]]" , "Output":"0.0" , "Result":"Failed" }, { "Test Name":"Test5" , "Test ID":"5" , "Requirement":"Distance should handle very large numbers" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"9999999999999999999999999999.0" , "Input":"[9999999999999999999999999999,0],[0,0]" , "Output":"1e+28" , "Result":"Passed" }, { "Test Name":"Test6" , "Test ID":"6" , "Requirement":"Distance should not accept non integers" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"NameError" , "Input":"[q,0],[0,0]" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test19" , "Test ID":"19" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"TypeError" , "Input":"[1.8,0][0,0][7,1][4,3]" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test21" , "Test ID":"21" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"-1.56079666012" , "Input":"[0,0],[999999999,99999999999]" , "Output":"-1.56079666012" , "Result":"Passed" }, { "Test Name":"Test9" , "Test ID":"9" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"NameError" , "Input":"pie" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test13" , "Test ID":"13" , "Requirement":"Shall return an angle of 0 upon entering the same point" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"0.0" , "Input":"[0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test28" , "Test ID":"28" , "Requirement":"Shall output if a point is within a triangle of 3 other points" , "Component":"helpers.py" , "Method":"insideTriangle()" , "Expected Output":"True" , "Input":"[1,1],[[0,0],[10,0],[0,10]]" , "Output":"True" , "Result":"Passed" }, { "Test Name":"Test24" , "Test ID":"24" , "Requirement":"Shall return False if the inputted point is not within the triangle" , "Component":"helpers.py" , "Method":"insideTriangle()" , "Expected Output":"False" , "Input":"[100,100],[[10,0],[0,0],[10,10]]" , "Output":"False" , "Result":"Passed" }, { "Test Name":"Test17" , "Test ID":"17" , "Requirement":"Shall fail with no input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"TypeError" , "Input":"" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test27" , "Test ID":"27" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"-0.982793723247" , "Input":"[1,1],[3,4]" , "Output":"-0.982793723247" , "Result":"Passed" }, { "Test Name":"Test15" , "Test ID":"15" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"NameError" , "Input":"[q,0],[0,0]" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test29" , "Test ID":"29" , "Requirement":"Shall return the correct area of a polygon" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"1" , "Input":"[[10,10],[10,20],[20,10],[20,20]]" , "Output":"0.0" , "Result":"Failed" }, { "Test Name":"Test16" , "Test ID":"16" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"3.14159265359" , "Input":"[33,0],[0,0]" , "Output":"3.14159265359" , "Result":"Passed" }, { "Test Name":"Test23" , "Test ID":"23" , "Requirement":"Shall return the correct area of a polygon" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"100.0" , "Input":"[[10,0],[0,0],[0,10],[10,10]]" , "Output":"-100.0" , "Result":"Failed" }, { "Test Name":"Test20" , "Test ID":"20" , "Requirement":"Shall handle negative points" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"1.57188543527" , "Input":"[9999999999,9999999999999],[-999999999,-99999999999]" , "Output":"1.57188543527" , "Result":"Passed" }, { "Test Name":"Test2" , "Test ID":"2" , "Requirement":"distance between a point and a negitive point should be positive" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.0" , "Input":"[-1,0],[0,0]" , "Output":"1.0" , "Result":"Passed" }, { "Test Name":"Test26" , "Test ID":"26" , "Requirement":"Shall be able to output correctly with 2 non-zero coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.0" , "Input":"[4,4],[4,5]" , "Output":"1.0" , "Result":"Passed" }, { "Test Name":"Test8" , "Test ID":"8" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"SyntaxError" , "Input":"[1.8.8,0],[0,0]" , "Output":"SyntaxError" , "Result":"Passed" }, { "Test Name":"Test1" , "Test ID":"1" , "Requirement":"Distance between a point and its self should return 0, and tests inputs at 0" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"0.0" , "Input":"[0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test10" , "Test ID":"10" , "Requirement":"Distance shall return correct value upon entering two coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"32.0" , "Input":"[0+32,0],[0,0]" , "Output":"32.0" , "Result":"Passed" }, { "Test Name":"Test12" , "Test ID":"12" , "Requirement":"Distance shall fail upon no input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"TypeError" , "Input":"" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test22" , "Test ID":"22" , "Requirement":"Shall create a triangle from the line" , "Component":"helpers.py" , "Method":"constructTriangleFromLine()" , "Expected Output":"[[0, 0], (10.0, 5.7735), (10.0, -5.7735)]" , "Input":"[10,0],[0,0]" , "Output":"[[0, 0], (10.0, 5.7735), (10.0, -5.7735)]" , "Result":"Passed" }, { "Test Name":"Test14" , "Test ID":"14" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"NameError" , "Input":"pie" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test18" , "Test ID":"18" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"SyntaxError" , "Input":"[1.8.8,0],[0,0]" , "Output":"SyntaxError" , "Result":"Passed" }, { "Test Name":"Test11" , "Test ID":"11" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"TypeError" , "Input":"[1.8,0][0,0][7,1][4,3]" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test7" , "Test ID":"7" , "Requirement":"Distance shall return correct value upon entering two coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.8" , "Input":"[1.8,0];[0,0]" , "Output":"SyntaxError" , "Result":"Failed" }, { "Test Name":"Test3" , "Test ID":"3" , "Requirement":"Very large negative inputs should still work" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"-9999999999999999.0" , "Input":"[-9999999999999999,0],[0,0]" , "Output":"1e+16" , "Result":"Failed" }]}; return x}
2013-11-21 03:54:04.745032

function getData(){ var x = {"rows": [{ "Test Name":"Test4" , "Test ID":"4" , "Requirement":"Distance should handle inputs of 0" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"0.0" , "Input":"[-0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test25" , "Test ID":"25" , "Requirement":"Shall handle areas spanning quadrants" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"400" , "Input":"[[10,10],[-10,-10],[10,-10],[-10,10]]" , "Output":"0.0" , "Result":"Failed" }, { "Test Name":"Test5" , "Test ID":"5" , "Requirement":"Distance should handle very large numbers" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"9999999999999999999999999999.0" , "Input":"[9999999999999999999999999999,0],[0,0]" , "Output":"1e+28" , "Result":"Passed" }, { "Test Name":"Test6" , "Test ID":"6" , "Requirement":"Distance should not accept non integers" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"NameError" , "Input":"[q,0],[0,0]" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test19" , "Test ID":"19" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"TypeError" , "Input":"[1.8,0][0,0][7,1][4,3]" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test21" , "Test ID":"21" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"-1.56079666012" , "Input":"[0,0],[999999999,99999999999]" , "Output":"-1.56079666012" , "Result":"Passed" }, { "Test Name":"Test9" , "Test ID":"9" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"NameError" , "Input":"pie" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test13" , "Test ID":"13" , "Requirement":"Shall return an angle of 0 upon entering the same point" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"0.0" , "Input":"[0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test28" , "Test ID":"28" , "Requirement":"Shall output if a point is within a triangle of 3 other points" , "Component":"helpers.py" , "Method":"insideTriangle()" , "Expected Output":"True" , "Input":"[1,1],[[0,0],[10,0],[0,10]]" , "Output":"True" , "Result":"Passed" }, { "Test Name":"Test24" , "Test ID":"24" , "Requirement":"Shall return False if the inputted point is not within the triangle" , "Component":"helpers.py" , "Method":"insideTriangle()" , "Expected Output":"False" , "Input":"[100,100],[[10,0],[0,0],[10,10]]" , "Output":"False" , "Result":"Passed" }, { "Test Name":"Test17" , "Test ID":"17" , "Requirement":"Shall fail with no input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"TypeError" , "Input":"" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test27" , "Test ID":"27" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"-0.982793723247" , "Input":"[1,1],[3,4]" , "Output":"-0.982793723247" , "Result":"Passed" }, { "Test Name":"Test15" , "Test ID":"15" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"NameError" , "Input":"[q,0],[0,0]" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test29" , "Test ID":"29" , "Requirement":"Shall return the correct area of a polygon" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"1" , "Input":"[[10,10],[10,20],[20,10],[20,20]]" , "Output":"0.0" , "Result":"Failed" }, { "Test Name":"Test16" , "Test ID":"16" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"3.14159265359" , "Input":"[33,0],[0,0]" , "Output":"3.14159265359" , "Result":"Passed" }, { "Test Name":"Test23" , "Test ID":"23" , "Requirement":"Shall return the correct area of a polygon" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"100.0" , "Input":"[[10,0],[0,0],[0,10],[10,10]]" , "Output":"-100.0" , "Result":"Failed" }, { "Test Name":"Test20" , "Test ID":"20" , "Requirement":"Shall handle negative points" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"1.57188543527" , "Input":"[9999999999,9999999999999],[-999999999,-99999999999]" , "Output":"1.57188543527" , "Result":"Passed" }, { "Test Name":"Test2" , "Test ID":"2" , "Requirement":"distance between a point and a negitive point should be positive" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.0" , "Input":"[-1,0],[0,0]" , "Output":"1.0" , "Result":"Passed" }, { "Test Name":"Test26" , "Test ID":"26" , "Requirement":"Shall be able to output correctly with 2 non-zero coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.0" , "Input":"[4,4],[4,5]" , "Output":"1.0" , "Result":"Passed" }, { "Test Name":"Test8" , "Test ID":"8" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"SyntaxError" , "Input":"[1.8.8,0],[0,0]" , "Output":"SyntaxError" , "Result":"Passed" }, { "Test Name":"Test1" , "Test ID":"1" , "Requirement":"Distance between a point and its self should return 0, and tests inputs at 0" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"0.0" , "Input":"[0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test10" , "Test ID":"10" , "Requirement":"Distance shall return correct value upon entering two coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"32.0" , "Input":"[0+32,0],[0,0]" , "Output":"32.0" , "Result":"Passed" }, { "Test Name":"Test12" , "Test ID":"12" , "Requirement":"Distance shall fail upon no input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"TypeError" , "Input":"" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test22" , "Test ID":"22" , "Requirement":"Shall create a triangle from the line" , "Component":"helpers.py" , "Method":"constructTriangleFromLine()" , "Expected Output":"[[0, 0], (10.0, 5.7735), (10.0, -5.7735)]" , "Input":"[10,0],[0,0]" , "Output":"[[0, 0], (10.0, 5.7735), (10.0, -5.7735)]" , "Result":"Passed" }, { "Test Name":"Test14" , "Test ID":"14" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"NameError" , "Input":"pie" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test18" , "Test ID":"18" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"SyntaxError" , "Input":"[1.8.8,0],[0,0]" , "Output":"SyntaxError" , "Result":"Passed" }, { "Test Name":"Test11" , "Test ID":"11" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"TypeError" , "Input":"[1.8,0][0,0][7,1][4,3]" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test7" , "Test ID":"7" , "Requirement":"Distance shall return correct value upon entering two coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.8" , "Input":"[1.8,0];[0,0]" , "Output":"SyntaxError" , "Result":"Failed" }, { "Test Name":"Test3" , "Test ID":"3" , "Requirement":"Very large negative inputs should still work" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"-9999999999999999.0" , "Input":"[-9999999999999999,0],[0,0]" , "Output":"1e+16" , "Result":"Failed" }]}; return x}
2013-11-23 02:30:09.693658

function getData(){ var x = {"rows": [{ "Test Name":"Test4" , "Test ID":"4" , "Requirement":"Distance should handle inputs of 0" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"0.0" , "Input":"[-0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test25" , "Test ID":"25" , "Requirement":"Shall handle areas spanning quadrants" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"400" , "Input":"[[10,10],[-10,-10],[10,-10],[-10,10]]" , "Output":"0.0" , "Result":"Failed" }, { "Test Name":"Test5" , "Test ID":"5" , "Requirement":"Distance should handle very large numbers" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"9999999999999999999999999999.0" , "Input":"[9999999999999999999999999999,0],[0,0]" , "Output":"1e+28" , "Result":"Passed" }, { "Test Name":"Test6" , "Test ID":"6" , "Requirement":"Distance should not accept non integers" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"NameError" , "Input":"[q,0],[0,0]" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test19" , "Test ID":"19" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"TypeError" , "Input":"[1.8,0][0,0][7,1][4,3]" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test21" , "Test ID":"21" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"-1.56079666012" , "Input":"[0,0],[999999999,99999999999]" , "Output":"-1.56079666012" , "Result":"Passed" }, { "Test Name":"Test9" , "Test ID":"9" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"NameError" , "Input":"pie" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test13" , "Test ID":"13" , "Requirement":"Shall return an angle of 0 upon entering the same point" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"0.0" , "Input":"[0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test28" , "Test ID":"28" , "Requirement":"Shall output if a point is within a triangle of 3 other points" , "Component":"helpers.py" , "Method":"insideTriangle()" , "Expected Output":"True" , "Input":"[1,1],[[0,0],[10,0],[0,10]]" , "Output":"True" , "Result":"Passed" }, { "Test Name":"Test24" , "Test ID":"24" , "Requirement":"Shall return False if the inputted point is not within the triangle" , "Component":"helpers.py" , "Method":"insideTriangle()" , "Expected Output":"False" , "Input":"[100,100],[[10,0],[0,0],[10,10]]" , "Output":"False" , "Result":"Passed" }, { "Test Name":"Test17" , "Test ID":"17" , "Requirement":"Shall fail with no input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"TypeError" , "Input":"" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test27" , "Test ID":"27" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"-0.982793723247" , "Input":"[1,1],[3,4]" , "Output":"-0.982793723247" , "Result":"Passed" }, { "Test Name":"Test15" , "Test ID":"15" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"NameError" , "Input":"[q,0],[0,0]" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test29" , "Test ID":"29" , "Requirement":"Shall return the correct area of a polygon" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"1" , "Input":"[[10,10],[10,20],[20,10],[20,20]]" , "Output":"0.0" , "Result":"Failed" }, { "Test Name":"Test16" , "Test ID":"16" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"3.14159265359" , "Input":"[33,0],[0,0]" , "Output":"3.14159265359" , "Result":"Passed" }, { "Test Name":"Test23" , "Test ID":"23" , "Requirement":"Shall return the correct area of a polygon" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"100.0" , "Input":"[[10,0],[0,0],[0,10],[10,10]]" , "Output":"-100.0" , "Result":"Failed" }, { "Test Name":"Test20" , "Test ID":"20" , "Requirement":"Shall handle negative points" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"1.57188543527" , "Input":"[9999999999,9999999999999],[-999999999,-99999999999]" , "Output":"1.57188543527" , "Result":"Passed" }, { "Test Name":"Test2" , "Test ID":"2" , "Requirement":"distance between a point and a negitive point should be positive" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.0" , "Input":"[-1,0],[0,0]" , "Output":"1.0" , "Result":"Passed" }, { "Test Name":"Test26" , "Test ID":"26" , "Requirement":"Shall be able to output correctly with 2 non-zero coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.0" , "Input":"[4,4],[4,5]" , "Output":"1.0" , "Result":"Passed" }, { "Test Name":"Test8" , "Test ID":"8" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"SyntaxError" , "Input":"[1.8.8,0],[0,0]" , "Output":"SyntaxError" , "Result":"Passed" }, { "Test Name":"Test1" , "Test ID":"1" , "Requirement":"Distance between a point and its self should return 0, and tests inputs at 0" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"0.0" , "Input":"[0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test10" , "Test ID":"10" , "Requirement":"Distance shall return correct value upon entering two coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"32.0" , "Input":"[0+32,0],[0,0]" , "Output":"32.0" , "Result":"Passed" }, { "Test Name":"Test12" , "Test ID":"12" , "Requirement":"Distance shall fail upon no input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"TypeError" , "Input":"" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test22" , "Test ID":"22" , "Requirement":"Shall create a triangle from the line" , "Component":"helpers.py" , "Method":"constructTriangleFromLine()" , "Expected Output":"[[0, 0], (10.0, 5.7735), (10.0, -5.7735)]" , "Input":"[10,0],[0,0]" , "Output":"[[0, 0], (10.0, 5.7735), (10.0, -5.7735)]" , "Result":"Passed" }, { "Test Name":"Test14" , "Test ID":"14" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"NameError" , "Input":"pie" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test18" , "Test ID":"18" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"SyntaxError" , "Input":"[1.8.8,0],[0,0]" , "Output":"SyntaxError" , "Result":"Passed" }, { "Test Name":"Test11" , "Test ID":"11" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"TypeError" , "Input":"[1.8,0][0,0][7,1][4,3]" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test7" , "Test ID":"7" , "Requirement":"Distance shall return correct value upon entering two coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.8" , "Input":"[1.8,0];[0,0]" , "Output":"SyntaxError" , "Result":"Failed" }, { "Test Name":"Test3" , "Test ID":"3" , "Requirement":"Very large negative inputs should still work" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"-9999999999999999.0" , "Input":"[-9999999999999999,0],[0,0]" , "Output":"1e+16" , "Result":"Failed" }]}; return x}
2013-11-23 02:35:28.672435

function getData(){ var x = {"rows": [{ "Test Name":"Test4" , "Test ID":"4" , "Requirement":"Distance should handle inputs of 0" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"0.0" , "Input":"[-0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test25" , "Test ID":"25" , "Requirement":"Shall handle areas spanning quadrants" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"400" , "Input":"[[10,10],[-10,-10],[10,-10],[-10,10]]" , "Output":"0.0" , "Result":"Failed" }, { "Test Name":"Test5" , "Test ID":"5" , "Requirement":"Distance should handle very large numbers" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"9999999999999999999999999999.0" , "Input":"[9999999999999999999999999999,0],[0,0]" , "Output":"1e+28" , "Result":"Passed" }, { "Test Name":"Test6" , "Test ID":"6" , "Requirement":"Distance should not accept non integers" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"NameError" , "Input":"[q,0],[0,0]" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test19" , "Test ID":"19" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"TypeError" , "Input":"[1.8,0][0,0][7,1][4,3]" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test21" , "Test ID":"21" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"-1.56079666012" , "Input":"[0,0],[999999999,99999999999]" , "Output":"-1.56079666012" , "Result":"Passed" }, { "Test Name":"Test9" , "Test ID":"9" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"NameError" , "Input":"pie" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test13" , "Test ID":"13" , "Requirement":"Shall return an angle of 0 upon entering the same point" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"0.0" , "Input":"[0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test28" , "Test ID":"28" , "Requirement":"Shall output if a point is within a triangle of 3 other points" , "Component":"helpers.py" , "Method":"insideTriangle()" , "Expected Output":"True" , "Input":"[1,1],[[0,0],[10,0],[0,10]]" , "Output":"True" , "Result":"Passed" }, { "Test Name":"Test24" , "Test ID":"24" , "Requirement":"Shall return False if the inputted point is not within the triangle" , "Component":"helpers.py" , "Method":"insideTriangle()" , "Expected Output":"False" , "Input":"[100,100],[[10,0],[0,0],[10,10]]" , "Output":"False" , "Result":"Passed" }, { "Test Name":"Test17" , "Test ID":"17" , "Requirement":"Shall fail with no input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"TypeError" , "Input":"" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test27" , "Test ID":"27" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"-0.982793723247" , "Input":"[1,1],[3,4]" , "Output":"-0.982793723247" , "Result":"Passed" }, { "Test Name":"Test15" , "Test ID":"15" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"NameError" , "Input":"[q,0],[0,0]" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test29" , "Test ID":"29" , "Requirement":"Shall return the correct area of a polygon" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"1" , "Input":"[[10,10],[10,20],[20,10],[20,20]]" , "Output":"0.0" , "Result":"Failed" }, { "Test Name":"Test16" , "Test ID":"16" , "Requirement":"Shall return the correct angle upon entering two numbers" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"3.14159265359" , "Input":"[33,0],[0,0]" , "Output":"3.14159265359" , "Result":"Passed" }, { "Test Name":"Test23" , "Test ID":"23" , "Requirement":"Shall return the correct area of a polygon" , "Component":"helpers.py" , "Method":"polyArea()" , "Expected Output":"100.0" , "Input":"[[10,0],[0,0],[0,10],[10,10]]" , "Output":"-100.0" , "Result":"Failed" }, { "Test Name":"Test20" , "Test ID":"20" , "Requirement":"Shall handle negative points" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"1.57188543527" , "Input":"[9999999999,9999999999999],[-999999999,-99999999999]" , "Output":"1.57188543527" , "Result":"Passed" }, { "Test Name":"Test2" , "Test ID":"2" , "Requirement":"distance between a point and a negitive point should be positive" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.0" , "Input":"[-1,0],[0,0]" , "Output":"1.0" , "Result":"Passed" }, { "Test Name":"Test26" , "Test ID":"26" , "Requirement":"Shall be able to output correctly with 2 non-zero coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.0" , "Input":"[4,4],[4,5]" , "Output":"1.0" , "Result":"Passed" }, { "Test Name":"Test8" , "Test ID":"8" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"SyntaxError" , "Input":"[1.8.8,0],[0,0]" , "Output":"SyntaxError" , "Result":"Passed" }, { "Test Name":"Test1" , "Test ID":"1" , "Requirement":"Distance between a point and its self should return 0, and tests inputs at 0" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"0.0" , "Input":"[0,0],[0,0]" , "Output":"0.0" , "Result":"Passed" }, { "Test Name":"Test10" , "Test ID":"10" , "Requirement":"Distance shall return correct value upon entering two coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"32.0" , "Input":"[0+32,0],[0,0]" , "Output":"32.0" , "Result":"Passed" }, { "Test Name":"Test12" , "Test ID":"12" , "Requirement":"Distance shall fail upon no input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"TypeError" , "Input":"" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test22" , "Test ID":"22" , "Requirement":"Shall create a triangle from the line" , "Component":"helpers.py" , "Method":"constructTriangleFromLine()" , "Expected Output":"[[0, 0], (10.0, 5.7735), (10.0, -5.7735)]" , "Input":"[10,0],[0,0]" , "Output":"[[0, 0], (10.0, 5.7735), (10.0, -5.7735)]" , "Result":"Passed" }, { "Test Name":"Test14" , "Test ID":"14" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"NameError" , "Input":"pie" , "Output":"NameError" , "Result":"Passed" }, { "Test Name":"Test18" , "Test ID":"18" , "Requirement":"Shall fail with malformed input" , "Component":"helpers.py" , "Method":"getAngle()" , "Expected Output":"SyntaxError" , "Input":"[1.8.8,0],[0,0]" , "Output":"SyntaxError" , "Result":"Passed" }, { "Test Name":"Test11" , "Test ID":"11" , "Requirement":"Distance shall fail upon malformed input" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"TypeError" , "Input":"[1.8,0][0,0][7,1][4,3]" , "Output":"TypeError" , "Result":"Passed" }, { "Test Name":"Test7" , "Test ID":"7" , "Requirement":"Distance shall return correct value upon entering two coordinates" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"1.8" , "Input":"[1.8,0];[0,0]" , "Output":"SyntaxError" , "Result":"Failed" }, { "Test Name":"Test3" , "Test ID":"3" , "Requirement":"Very large negative inputs should still work" , "Component":"helpers.py" , "Method":"distance()" , "Expected Output":"-9999999999999999.0" , "Input":"[-9999999999999999,0],[0,0]" , "Output":"1e+16" , "Result":"Failed" }]}; return x}
2013-11-23 03:55:35.630134


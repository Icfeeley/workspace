main = do
	print (sumOfThreeOrFiveBelow 1000)
	print (sumOfEvenFib 4000000)
	print (last(primeFactors 317584931803))
	

{- Project Euler problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5,
we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
-}
sumOfThreeOrFiveBelow :: Int -> Int
sumOfThreeOrFiveBelow n = sum [ x | x <- [0..(n-1)], x `mod` 3 == 0 || x `mod` 5 == 0]

{- Project Euler problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

		1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
-}

--sumOfEvenFib
sumOfEvenFib :: Integer -> Integer
sumOfEvenFib n = sum [ x | x <- takeWhile (<=n) fibs, even x]
	where
		fibs = 1 : 1 : zipWith (+) fibs (tail fibs)

{-Project Euler problem 3
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
-}

--
primes = 2 : filter ( (==1) . length . primeFactors) [3,5..]
primeFactors n = factor n primes
	where
		factor n (p:ps)
			| p*p > n
			| n `mod` p == 0 = p : factor (n `div` p) (p:ps)
			| otherwise		 = factor n ps


--factorial
fact :: Int -> Int
fact 0 = 1
fact n = n * fact (n-1)
-- alternatively without recursion:
fact2 n = foldl (*) 1 [1..n]
	{-
		A fold deals with combining a function and a data structure,
		the fold proceeds to combin elements of the data structure using
		the function in some systematic way. In the case above we can think of
		foldl (*) as replacing the commas in the list with * and calculating this
		starting with the last element (the l at the end of foldl)
	-}

--sumOfThreeOrFiveBelow n = sum [ x | x <- [0..(n-1)], x `mod` 3 == 0 || x `mod` 5 == 0]